@using System.IdentityModel.Protocols.WSTrust
@model MessageStack.Models.ViewModels.ChatViewModel

<section id="chat-area">
    @Html.ActionLink("< Back to Dashboard", "Index", "Dashboard")<br />

    <span>
        <span><b>@Model.Name</b></span>
        @{
            if (Model.Participants.Count > 2)
            {@:(@Model.Participants.Count)
        }}

        <br />
        <span>You | </span>
        @foreach (var a in Model.Participants)
        {
            if (a.Id != Model.CurrentAccount.Id)
            {
                <span>@a.Name</span>
                if (Model.Participants[Model.Participants.Count - 1] != a)
                { <span> | </span>}
            }
        }
    </span>


    <!--Check if any messages have been sent-->
    @if (Model.Messages?.Count >= 0)
    {
        <section class="scrollbar scrollbar-primary">
            <section class="panel panel-default force-overflow" id="chat-box">
                <!--Loop through all messages in this chat (maybe place a cap?)-->
                @foreach (var m in Model.Messages)
                {

                    <!--Check if the message is sent by the current user-->
                    if (m.SenderId == Model.CurrentAccount.Id)
                    {
                        <section class="current-account-message speech-bubble-current-account opacity-75">

                            @if (Model.Participants.Count > 2)
                            {<b>@Model.CurrentAccount.Name</b>}
                            <br /><span class="">@m.Text</span><br /><br />
                            <span class="opacity-75 time-stamp-current-account">@m.TimeStamp.ToString($"HH:mm")</span>
                        </section>
                    }
                    else
                    {
                        <!--Check if the sender is a contact, if so; use contact name.-->
                        if (Model.CurrentAccount.Contacts != null && Model.CurrentAccountContacts.Select(c => c.Id).Contains(m.Id))
                        {

                            <section class="other-account-message speech-bubble-other-account">

                                @if (Model.Participants.Count > 2)
                                {
                                    <b>@Model.CurrentAccount.Contacts.FirstOrDefault(c => c.ContactAccountId == c.Id)?.Name</b>
                                    <br />
                                }
                                <div>@m.Text</div>
                                <span class="opacity-50 time-stamp-other-account">@m.TimeStamp.ToString($"HH:mm")</span>
                            </section>
                        }
                        else
                        {

                            <section class="other-account-message speech-bubble-other-account">
                                @if (Model.Participants.Count > 2)
                                {
                                    <b>@m.SenderName</b>
                                }
                                <div>@m.Text</div>
                                <span class="opacity-50 time-stamp-other-account">@m.TimeStamp.ToString($"HH:mm")</span>
                            </section>
                        }
                    }
                }
            </section>
        </section>
    }
    else
    {
        <br /><div>No messages have been sent in this chat so far. Send one now! </div>
    }


    @Html.ValidationSummary()
    @using (Html.BeginForm())
    {
        <div class="form">
            <input type="submit" value="Send" class="btn btn-default col-lg-1 chat-send-button" />
            @Html.TextBoxFor(m => m.MessageText, new { @class = "form-control chat-textbox" })
        </div>
    }
</section>


@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
